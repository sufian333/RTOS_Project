/* ERIKA Enterprise. */
#include "ee.h"
#include <string.h>
/* Arduino SDK. */
#include "Arduino.h"

/*
 * Pin 13 has an LED connected on most Arduino boards.
 */
int led = 13;
int count=0;    // Message duration for 180s
static char msg[600];
static char msg1[] ="1011100000001010111010001000101110001110001010101000100010111010000000101000111010000000111000101010100010000000101010100010111000111010001110101000000010100010101000000011101010100010001110001110001000101110100000001110001010101000101110001110100000001011100000001110101010001010001011101000111010100000001010001110100000001110001010101000100000001011100010100010111010000000.";	// msg1
static char msg2[] ="1011100000001010100010101010001110111011100010111010001110000000101110111010001000111010001110101110100010100010111010100000001011101010000000101000101010000000101011100010101000101011100010111000101110101000101110101000111010111011100000001110101010001000111000111000100010111010000000111000101010100010111000111010000000101110000000101110101000111011101110001110100011101110100000001110111000100011101110001110111011100010111010001110101110111000000010111000111010001110101110111000000011101010001011100011101011101110000000.";	// msg2
static char msg3[] ="1011100011101011101000111010111010001000101110111010001110000000101010001110111011100011101110001000111000101010100010100011101000111011101000000011100010101010001011100011100000001110101110111000111011101110001010111000000011101011101000101110001110100011101000110111011100011100000001110101110100010101010001011100011101000111011101000100000001011100011101000111010100000001110101110111000111011101110001010111000000010111011100010100010111010100010111010100000001010111010001000100010111010100000001110101010001000111000111000100010111010000000.";	// msg3
static char msg4[] ="101110001110101000101010111000100011101000111000101011100010111010001000000011101011101000101110001110100000001110101010001000000010111010001000101110001011101010000000101010100010111000101110111010001011101110100010100011101000100010101000101010000000..";	// msg4
static char msg5[] ="10111000101110101000101110101000000011100010101010001000000010001010111010001010111010001110111011100010111010001110000000111010111011100011101110111000101011100000001011100010111010001000000011101110001011100011101011100010100011101000111011101000000010111011100010100010111010100010111010100000001010111000101110101000111000101000111011100010111000111000100010111010100011101011101110000000101110111010001011100011101011101110000000111011101110001010111010001010111010000000.";	// msg5
/*
 * TASK AND ISR2 MUST BE C SYMBOL
 */

extern "C" {

/* TASKs */
DeclareTask(task_sender);
/* Idle Hook */

void tweet_change();
extern void idle_hook(void);

} /* extern "C" */

void setup(void) {
	/* initialize the digital pin as an output. */
	pinMode(led, OUTPUT);
	Serial.begin(115200);
	digitalWrite(led, LOW);
	memcpy(&msg, &msg1, sizeof msg1);
}

void idle_hook(void) {
}

int main(void) {
	init();

	setup();

	StartOS(OSDEFAULTAPPMODE);

	return 0;
}

/*
 * TASK SENDER
 */
TASK(task_sender) {
	static int i = 0;
	static int msg_delay=0;
	static int count=0;
	if (count==1800)  //180 sec
	{	msg_delay=5;
		count=0;
		i=0;
		tweet_change();
		Serial.write("\r\nTweet_changed\n");
	}
	if (msg_delay!=0){
		digitalWrite(led, LOW);
		Serial.write("delay\r");
		msg_delay--;
	}
	else{
		count++;
	if (msg[i] == '.'){// check if end of message reached
		i=0;
		Serial.write("repeat\r\n");

		if (msg[i] == '1'){
			digitalWrite(led, HIGH);
			Serial.write("1");
		}
		else{
			digitalWrite(led, LOW);
			Serial.write("0");
		}
		i++;
	} else {
		if (msg[i] == '1'){
			digitalWrite(led, HIGH);
		Serial.write("1");
		}
		else{
			digitalWrite(led, LOW);
			Serial.write("0");
		}
		i++;
	}
	}
	TerminateTask();
}


void tweet_change(){

	//Serial.write("Inside Function\r\n");
	static int msg_num=2;
		switch (msg_num){
				case 1:
					memcpy(&msg, &msg1, sizeof msg1);
					msg_num++;
					break;
				case 2:
					memcpy(&msg, &msg2, sizeof msg2);
					msg_num++;
					break;
				case 3:
					memcpy(&msg, &msg3, sizeof msg3);
					msg_num++;
					break;
				case 4:
					memcpy(&msg, &msg4, sizeof msg4);
					msg_num++;
					break;
				case 5:
					memcpy(&msg, &msg5, sizeof msg5);
					msg_num=1;
					break;
				default:
					memcpy(&msg, &msg1, sizeof msg1);
					msg_num=1;
					break;
				}
}

